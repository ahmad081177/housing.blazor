@using HousingWebApp.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager navigateTo

@inject ProtectedLocalStorage storage
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid" @onclick="ToggleIconMenu">
        <span class="oi oi-monitor" style="color:white;" aria-hidden="true"></span>
        @if (!@IconMenuActive)
        {
            <a class="navbar-brand" href="">Housing</a>
        }
        @* <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button> *@
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>
                @if (!@IconMenuActive)
                {
                    <label>Home</label>
                }
            </NavLink>
        </div>
        <hr/>
        @if (email != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/login" @onclick="Logout">
                    <span class="oi oi-account-logout" aria-hidden="true"></span>
                    @if (!@IconMenuActive)
                    {
                        <label>Logout</label>
                    }
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="oi oi-person" aria-hidden="true"></span>
                    @if (!@IconMenuActive)
                    {
                        <label>Register</label>
                    }
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span>
                    @if (!@IconMenuActive)
                    {
                        <label>Login</label>
                    }
                </NavLink>
            </div>
        }
        <hr/>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/house/gmap">
                <span class="oi oi-map" aria-hidden="true"></span>
                @if (!@IconMenuActive)
                {
                    <label>Map</label>
                }
            </NavLink>
        </div>
    </nav>


</div>

<div class="bottom-row">
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="profile">
            <span class="oi oi-person" aria-hidden="true"></span>
            @if (!@IconMenuActive)
            {
                <label> Profile</label>
            }
        </NavLink>
    </div>
</div>

@code {
    //bool to send to MainLayout for shrinking sidebar and showing/hide menu text
    private bool IconMenuActive { get; set; } = false;

    //EventCallback for sending bool to MainLayout
    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    //Method to toggle IconMenuActive bool and send bool via EventCallback
    private async Task ToggleIconMenu()
    {
        IconMenuActive = !IconMenuActive;
        await ShowIconMenu.InvokeAsync(IconMenuActive);
    }

    string? email = null;
    AppUser? user = null;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            email = null;
            user = null;
            var res = await storage.GetAsync<string>("email");
            var res2 = await storage.GetAsync<AppUser>("user");
            if (res.Success && res2.Success)
            {
                email = res.Value;
                user = res2.Value;
            }
            StateHasChanged();
        }
    }
    async Task Logout()
    {
        await storage.DeleteAsync("email");
        await storage.DeleteAsync("user");
        email = null;
        user = null;
        StateHasChanged();
    }
}
