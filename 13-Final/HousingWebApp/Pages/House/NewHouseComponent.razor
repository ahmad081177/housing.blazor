@page "/house/new2/"
@using HousingWebApp.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inherits AuthComponent

@inject IDbTransactionService TransactionService
@inject HousingDBContext db
@inject NavigationManager navigateTo
@inject AddressService addressService
@inject ProtectedLocalStorage storage

<PageTitle>New House</PageTitle>
@if (model == null)
{
    <HousingWebApp.Pages.Components.DefaultProgressBarComponent />
}
else
{
    <div class="container">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title">Create New House</h3>
                <HousingWebApp.Pages.Components.FormErrorComponent Error="@error" />
            </div>
            <div class="card-body">
                <form class="needs-validation" @onsubmit="OnSaveHouse">
                    <div class="form-group">
                        <label for="info">Information:</label>
                        <InputText id="info" class="form-control" @bind-Value="model.Info" />
                    </div>

                    <div class="form-group">
                        <label for="mimage">Main Image:</label>
                        <InputFile id="mimage" class="form-control" title="House Image" accept=".png,.jpg" OnChange="HandleMainImage" />
                    </div>
                    <div class="form-group">
                        <label for="mimages">More Images:</label>
                        <InputFile id="mimages" class="form-control" title="House Images" multiple accept=".png,.jpg" OnChange="HandleMoreImages" />
                    </div>
                    <div class="form-group">
                        <label for="price">Price:</label>
                        <input type="number" required id="price" class="form-control" @bind="model.Price" />
                    </div>
                    <div class="form-group">
                        <label for="sr">Square Root:</label>
                        <input type="number" required id="sr" class="form-control" @bind="model.SqrRoot" />
                    </div>
                    <div class="form-group">
                        <label for="hasSP">Has Swimming Pool:</label>
                        <div class="toggle-switch">
                            <input type="checkbox" id="hasSP" class="toggle-input" @bind="model.HouseDetails.HasSwimmingPool" />
                            <label for="hasSP" class="toggle-label"></label>
                        </div>
                    </div>

                    <h3>Address</h3>
                    <div class="form-group">
                        <label for="address1">Country:</label>
                        <InputText id="address1" class="form-control" @bind-Value="model.Address.Country" />
                    </div>
                    <div class="form-group">
                        <label for="address2">City:</label>
                        <InputText id="address3" class="form-control" @bind-Value="model.Address.City" />
                    </div>
                    <div class="form-group">
                        <label for="address3">Street:</label>
                        <InputText id="address3" class="form-control" @bind-Value="model.Address.Street" />
                    </div>
                    <button type="submit" class="btn btn-primary btn-block">Create New House</button>
                </form>
            </div>
        </div>
    </div>
}

@code {
    House? model = null;
    string error = "";
    List<string>? images = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && LoggedInUser != null)
        {
            model = new House();
            model.AppUserId = LoggedInUser.Id;
            images = new();
            StateHasChanged();
        }

    }
    async Task UpdateAddress()
    {
        //convert address to longt and lat
        var r = await addressService.ConvertGAddress(model.Address);
        if (r != null)
        {
            model.Address.Lat = r.Item1;
            model.Address.Longt = r.Item2;
        }
    }
    async Task OnSaveHouse()
    {
        if (Validate())
        {
            await SaveHouseAsync();
            navigateTo.NavigateTo("/", true);
        }
        else
        {
            StateHasChanged();
        }
    }
    async Task SaveHouseAsync()
    {
        await UpdateAddress();
        //save images
        if (images != null && images.Count > 0)
            model.HouseImages.Base64Images = images;

        // await TransactionService.ExecuteInTransactionAsync(async () =>
        // {
        db.Houses.Add(model);
        await db.SaveChangesAsync();
        //  });
    }
    bool Validate()
    {
        //if(model!=null && model.Price<50)
        if (model?.Price < 50)
        {
            error = "Price must be greater than 50";
            return false;
        }
        if (model?.SqrRoot < 50)
        {
            error = "Square root must be greater than 50";
            return false;
        }
        return true;
    }

    async Task HandleMainImage(InputFileChangeEventArgs e)
    {
        string? str = await ConvertUploadImage(e);
        if (!string.IsNullOrEmpty(str))
        {
            model.HouseImages.MainImage = str;

        }
    }
    async Task HandleMoreImages(InputFileChangeEventArgs e)
    {
        images.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            string? str = await ConvertUploadImage(file);
            if (!string.IsNullOrEmpty(str))
            {
                images.Add(str);
            }
        }
    }
    async Task<string?> ConvertUploadImage(InputFileChangeEventArgs e)
    {
        var f = e.GetMultipleFiles().FirstOrDefault();
        return await ConvertUploadImage(f);
    }
    async Task<string?> ConvertUploadImage(IBrowserFile? f)
    {
        if (f != null)
        {
            var f2 = await f.RequestImageFileAsync(f.ContentType, 300, 300);
            var ms = new MemoryStream();
            await f2.OpenReadStream().CopyToAsync(ms);
            string s = Convert.ToBase64String(ms.ToArray());
            s = $"data:{f.ContentType};base64,{s}";

            return s;
        }
        return null;
    }
}
