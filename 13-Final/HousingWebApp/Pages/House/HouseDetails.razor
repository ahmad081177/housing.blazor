@page "/house/{HouseId:int}"
@using HousingWebApp.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using HousingWebApp.Pages.Components

@inject HousingDBContext db
@inject ProtectedLocalStorage storage
@inject NavigationManager navigateTo

<PageTitle>House Details</PageTitle>

<!-- Header Navigation -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">House Details</a>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/house/gmap">Show on Map</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

@if (house != null)
{
    <!-- House Details -->
    <div class="card" style="width:50%">
        <img class="card-img-top" style="width:50%" src="@house.HouseImages.MainImage" />
        <div class="card-body">
            <h5 class="card-title">@house.Info</h5>
            <div style="width:50%">
                <ImagesSliderComponent Base64Images="@house.HouseImages.Base64Images"/>
            </div>

            <p class="card-text">Price: @house.Price</p>
            <p class="card-text">Square Root: @house.SqrRoot</p>
            @if (house.HouseDetails.HasSwimmingPool)
            {
                <p class="card-text">Has Swimming Pool:<span class="oi oi-check" style="color:green"></span></p>
            }
        </div>
    </div>
    <!-- Reviews -->
    <ReviewsComponent HouseId="@HouseId" />

}
else
{
    <h4>Loading...</h4>
}

@code {
    [Parameter]
    public int HouseId { get; set; }
    private string ReviewText { get; set; } = "";
    private int Rating { get; set; } = 3;
    private House? house;
    private AppUser loggedInUser;
    private List<Review> reviews;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var res = await storage.GetAsync<AppUser>("user");
            if (res.Success)
            {
                loggedInUser = res.Value;
            }
            else
            {
                throw new Exception("User not logged in");
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (house == null)
        {
            //get house out of the id
                house = await db.Houses
                .Include(h=>h.HouseDetails)
                .Include(h=>h.HouseImages)
                .Include(h=>h.Address)
                .Include(h=>h.AppUser)
                .FirstOrDefaultAsync(d => d.Id == HouseId);
            StateHasChanged();
        }
    }
}