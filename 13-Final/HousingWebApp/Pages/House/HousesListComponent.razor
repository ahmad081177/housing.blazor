@page "/house/list"

@using HousingWebApp.Models
@using HousingWebApp.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using HousingWebApp.Pages.Components

@inherits AuthComponent

@inject IDbTransactionService TransactionService
@inject HousingDBContext db
@inject ProtectedLocalStorage storage
@inject NavigationManager navigateTo

<PageTitle>Houses</PageTitle>

@if (houses != null && houses.Any())
{
    <div class="container mt-5">
        <h3 class="text-center">All Houses</h3>
        <div class="row justify-content-center mb-3">
            <div class="col-lg-6">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Filter users by house properties" @bind="filterText" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" @onclick="ClearFilterText">
                            <i class="oi oi-x"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Info</th>
                            <th>Price</th>
                            <th>Square Root</th>
                            <th>Image</th>
                            <th>Address</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var house in FilteredHouses)
                        {
                            <tr>
                                <td>@house.Id</td>
                                <td>@house.Info</td>
                                <td>@house.Price</td>
                                <td>@house.SqrRoot</td>
                                <td><img src="@house.HouseImages.MainImage" style="max-width: 100px; max-height: 100px;" /></td>
                                <td>@house.Address.Street, @house.Address.City, @house.Address.Country</td>
                                <td>
                                    <button @onclick="() => OpenGMaps(house.Id)">Go to Map</button>
                                    <button @onclick="() => OpenDetails(house.Id)">Details</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <p>No houses found.</p>
}

@code {
    private List<House>? houses;
    private string filterText = "";

    IEnumerable<House> FilteredHouses
    {
        get
        {
            if (string.IsNullOrWhiteSpace(filterText))
            {
                return houses;
            }
            else
            {
                return houses.Where(u =>
                    u.Info.ToLower().Contains(filterText.ToLower()) ||
                    u.Address.ToString().ToLower().Contains(filterText.ToLower()) ||
                    u.AppUser.FirstName.ToLower().Contains(filterText.ToLower()) ||
                    u.AppUser.LastName.ToLower().Contains(filterText.ToLower())
                );
            }
        }
    }
    void ClearFilterText()
    {
        filterText = "";
    }
    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && houses == null)
        {
            houses = new();
            await LoadHousesAsync();
            StateHasChanged();
        }
    }

    private async Task LoadHousesAsync()
    {
        //await TransactionService.ExecuteInTransactionAsync(async () =>
        // {
        houses = await db.Houses.Include(h => h.Address)
        .Include(h => h.AppUser)
        .Include(h => h.HouseImages)
        .Include(h => h.HouseDetails)
        .ToListAsync();
        //});
    }

    private void OpenGMaps(int houseId)
    {
        // Navigate to GMapsComponent with houseId
        navigateTo.NavigateTo($"house/gmap/{houseId}");
    }

    private void OpenDetails(int houseId)
    {
        // Navigate to HouseDetails with houseId
        navigateTo.NavigateTo($"/house/{houseId}");
    }
}