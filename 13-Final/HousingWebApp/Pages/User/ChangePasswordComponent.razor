@page "/user/password/change"
@inherits AuthComponent

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using HousingWebApp.ViewModels
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage storage
@inject HousingDBContext db
@inject NavigationManager navigateTo

<h3>Change Password</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="text-center">Change Password</h3>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <EditForm Model="@changePasswordModel" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="currentPassword">Current Password</label>
                    <InputText id="currentPassword" @bind-Value="@changePasswordModel.CurrentPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => changePasswordModel.CurrentPassword)" />
                </div>

                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <InputText id="newPassword" @bind-Value="@changePasswordModel.NewPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText id="confirmPassword" @bind-Value="@changePasswordModel.ConfirmPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => changePasswordModel.ConfirmPassword)" />
                </div>

                <button type="submit" class="btn btn-primary btn-block mt-3">Change Password</button>
                <button class="btn btn-link btn-block mt-3" @onclick="GoToLoginPage">Back to Login</button>
            </EditForm>
        </div>
    </div>
</div>
@code {
    private ChangePasswordViewModel changePasswordModel = new();
    private string successMessage;
    private string errorMessage;

    private async Task ChangePassword()
    {
        successMessage = "";
        errorMessage = "";
        if(LoggedInUser.Password!=changePasswordModel.CurrentPassword)
        {
            errorMessage = "Current password is incorrect!";
            return;
        }
        if(LoggedInUser.Password==changePasswordModel.NewPassword)
        {
            errorMessage = "New password cannot be the same as the current password!";
            return;
        }

        try
        {
            LoggedInUser.Password = changePasswordModel.NewPassword;
            db.AppUsers.Update(LoggedInUser);
            await db.SaveChangesAsync();
            successMessage = "Password changed successfully!";
            await storage.DeleteAsync("email");
            GoToLoginPage();
        }
        catch (Exception)
        {
            //Roollback
            LoggedInUser.Password = changePasswordModel.CurrentPassword;
            db.AppUsers.Update(LoggedInUser);
            errorMessage = "An error occurred while changing the password.";
            return;
        }
    }
    private void GoToLoginPage()
    {
        navigateTo.NavigateTo("/login");
    }
}
