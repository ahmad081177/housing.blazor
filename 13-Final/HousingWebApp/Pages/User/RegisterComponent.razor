@page "/register"
@using HousingWebApp.Models
@using HousingWebApp.ViewModels
@using HousingWebApp.Services
@using Microsoft.EntityFrameworkCore
@inject HousingDBContext db
@inject NavigationManager navigateTo
@inject EmailService emailService
@inject AddressService addressService

<PageTitle>Register to Housing</PageTitle>
@if (model == null)
{
    <HousingWebApp.Pages.Components.DefaultProgressBarComponent/>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title text-center">Register for Housing</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@model" OnValidSubmit="RegisterUser">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="firstName">First Name:</label>
                                        <InputText id="firstName" class="form-control" @bind-Value="model.FirstName" placeholder="Enter your first name" />
                                        <ValidationMessage For="@(()=> model.FirstName)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="lastName">Last Name:</label>
                                        <InputText id="lastName" class="form-control" @bind-Value="model.LastName" placeholder="Enter your last name" />
                                        <ValidationMessage For="@(()=> model.LastName)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="email">Email:</label>
                                        <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="user@mail.com" />
                                        <ValidationMessage For="@(()=> model.Email)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="cemail">Confirm Email:</label>
                                        <InputText id="cemail" class="form-control" @bind-Value="model.ConfirmEmail" placeholder="user@mail.com" />
                                        <ValidationMessage For="@(()=> model.ConfirmEmail)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="password">Password:</label>
                                        <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" placeholder="****" />
                                        <ValidationMessage For="@(()=> model.Password)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="cpassword">Confirm Password:</label>
                                        <InputText type="password" id="cpassword" class="form-control" @bind-Value="model.ConfirmPassword" placeholder="****" />
                                        <ValidationMessage For="@(()=> model.ConfirmPassword)" />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="mimage">Profile Image:</label>
                                        <InputFile id="mimage" class="form-control" title="House Image" accept=".png,.jpg" OnChange="HandleProfileImage" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <label for="gender">Gender:</label>
                                    <select id="gender" class="form-control" @bind="@model.Gender">
                                        <option value="M">Male</option>
                                        <option value="F">Female</option>
                                        <option value="O">Other</option>
                                    </select>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="phone">Phone:</label>
                                <InputText id="phone" class="form-control" @bind-Value="model.Phone" />
                                <ValidationMessage For="@(()=> model.Phone)" />
                            </div>

                            <h3>Address</h3>
                            <div class="form-group">
                                <label for="address1">Country:</label>
                                <InputText id="address1" class="form-control" @bind-Value="model.Address.Country" />
                                <ValidationMessage For="@(()=> model.Address.Country)" />
                            </div>
                            <div class="form-group">
                                <label for="address2">City:</label>
                                <InputText id="address2" class="form-control" @bind-Value="model.Address.City" />
                                <ValidationMessage For="@(()=> model.Address.City)" />
                            </div>
                            <div class="form-group">
                                <label for="address3">Street:</label>
                                <InputText id="address3" class="form-control" @bind-Value="model.Address.Street" />
                            </div>

                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-primary mx-5">Register</button>
                                <a href="/login" class="btn btn-link">Login</a>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    AppRegister model = null;// new AppRegister();
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            model = new AppRegister();
            //address = new Address();
            StateHasChanged();
        }
    }
    async Task HandleProfileImage(InputFileChangeEventArgs e)
    {
        var f = e.GetMultipleFiles().FirstOrDefault();
        string? str= await ConvertUploadImage(f);
        if (!string.IsNullOrEmpty(str))
        {
            model.ProfileImage = str;
        }
    }
    async Task<string?> ConvertUploadImage(IBrowserFile? f)
    {
        if (f != null)
        {
            var f2 = await f.RequestImageFileAsync(f.ContentType, 300, 300);
            var ms = new MemoryStream();
            await f2.OpenReadStream().CopyToAsync(ms);
            string s = Convert.ToBase64String(ms.ToArray());
            s = $"data:{f.ContentType};base64,{s}";

            return s;
        }
        return null;
    }
    async Task UpdateUserAddress(AppUser user)
    {
        //convert address to longt and lat
        var r = await addressService.ConvertAddress(model.Address);
        if (r != null)
        {
            model.Address.Lat = r.Item1;
            model.Address.Longt = r.Item2;
        }
        user.Address.City = model.Address.City;
        user.Address.Country = model.Address.Country;
        user.Address.Street = model.Address.Street;
        user.Address.Lat = model.Address.Lat;
        user.Address.Longt = model.Address.Longt;
    }
    public async Task RegisterUser()
    {
        //check if user exists by email
        var temp = await db.AppUsers
        .Where(u => u.Email == model.Email)
        .FirstOrDefaultAsync();
        if (temp == null)
        {
            //goto DB and try register...
            AppUser user = new AppUser();
            user.Email = model.Email;
            user.FirstName = model.FirstName;
            user.LastName = model.LastName;
            user.Phone = model.Phone;
            user.Password = model.Password;
            user.ProfileImage = model.ProfileImage;
            user.Gender = model.Gender;
            user.IsAdmin = false;

            await UpdateUserAddress(user);

            db.AppUsers.Add(user);
            await db.SaveChangesAsync();
            //Send Hello email
            var w = Task.Run(async () =>
            {
                await emailService.SendEmailAsync(user.Email, "Welcome to Housing", "Hello " + user.FirstName + ",<br/>Welcome to Housing App. You have successfully registered.<br/>Thanks");
            });
            
            //goto home page
            navigateTo.NavigateTo("/login");
        }
        else
        {
            //Error message
        }
    }
}
