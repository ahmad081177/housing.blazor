@page "/admin/users"
@using HousingWebApp.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using HousingWebApp.Models
@using Microsoft.EntityFrameworkCore

@inherits AuthComponent

@inject IDbTransactionService TransactionService
@inject HousingDBContext db
@inject ProtectedLocalStorage storage
@inject NavigationManager navigateTo

<h3>User Management (Admin Only)</h3>

@if(!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (users == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Is Admin</th>
                <th>Is Blocked</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.Phone</td>
                    <td>@(user.IsAdmin ? "Yes" : "No")</td>
                    <td>@(user.IsBlocked ? "Yes" : "No")</td>
                    <td>
                        <button @onclick="() => ToggleBlockUserAsync(user)">
                            @(user.IsBlocked ? "Unblock" : "Block")
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AppUser>? users;
    string error = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        error = "";
        if(LoggedInUser!=null && firstRender)
        {
            if (LoggedInUser.IsAdmin)
            {
                // Load all users
                await LoadUsersAsync();
            }
            else
            {
                // Redirect to home page if not admin
                error = "You are not authorized to view this page.";
            }
            StateHasChanged();
        }
    }
    private async Task LoadUsersAsync()
    {
        //await TransactionService.ExecuteInTransactionAsync(async () =>
       // {
            users = await db.AppUsers.ToListAsync();
       // });
    }
    private async Task ToggleBlockUserAsync(AppUser user)
    {
       // await TransactionService.ExecuteInTransactionAsync(async () =>
      // {
            user.IsBlocked = !user.IsBlocked;
            db.AppUsers.Update(user);
       // });
        StateHasChanged();
    }
}
